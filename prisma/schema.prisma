// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  name            String?
  password        String?
  role            UserRole @default(CUSTOMER)
  isEmailVerified Boolean  @default(false)
  
  // Customer profile
  phone           String?
  dateOfBirth     DateTime?
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastLoginAt     DateTime?
  
  // Relations
  addresses       Address[]
  orders          Order[]
  reviews         Review[]
  cartItems       CartItem[]
  wishlistItems   WishlistItem[]

  // Wholesale account
  wholesaleAccount WholesaleAccount?
  conversations    Conversation[]
  
  @@map("users")
}

model Address {
  id          String      @id @default(cuid())
  userId      String
  type        AddressType @default(SHIPPING)
  
  firstName   String
  lastName    String
  company     String?
  street      String
  city        String
  state       String
  zipCode     String
  country     String      @default("US")
  phone       String?
  
  isDefault   Boolean     @default(false)
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Orders using this address
  shippingOrders Order[] @relation("ShippingAddress")
  billingOrders  Order[] @relation("BillingAddress")
  
  @@map("addresses")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  
  // SEO
  metaTitle       String?
  metaDescription String?
  ogImage         String?
  
  // Display
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  products    Product[]
  
  @@map("categories")
}

model Product {
  id          String      @id @default(cuid())
  name        String
  slug        String      @unique
  description String?
  
  // Salsa specific
  heatLevel   HeatLevel
  ingredients String[]
  
  // Pricing
  price       Decimal     @db.Decimal(10, 2)
  compareAtPrice Decimal? @db.Decimal(10, 2)
  costPrice   Decimal?    @db.Decimal(10, 2)
  
  // Inventory
  sku         String      @unique
  barcode     String?
  inventory   Int         @default(0)
  lowStockThreshold Int   @default(5)
  
  // Images
  images      String[]
  featuredImage String?
  
  // Attributes
  weight      Decimal?    @db.Decimal(8, 2)
  dimensions  Json?       // {length, width, height}
  
  // SEO
  metaTitle       String?
  metaDescription String?
  ogImage         String?
  searchKeywords  String[]
  
  // Display
  isActive    Boolean     @default(true)
  isFeatured  Boolean     @default(false)
  sortOrder   Int         @default(0)
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  categoryId  String
  category    Category    @relation(fields: [categoryId], references: [id])
  
  orderItems  OrderItem[]
  cartItems   CartItem[]
  reviews     Review[]
  wishlistItems WishlistItem[]
  fundraiserProducts FundraiserProduct[]
  productTags ProductTag[]

  @@map("products")
}

model Conversation {
  id        String              @id @default(cuid())
  subject   String?
  userId    String?
  user      User?               @relation(fields: [userId], references: [id], onDelete: SetNull)
  email     String?
  status    ConversationStatus  @default(OPEN)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  messages  Message[]

  @@map("conversations")
}

model Message {
  id             String            @id @default(cuid())
  conversationId String
  senderType     MessageSenderType
  body           String
  readAt         DateTime?
  createdAt      DateTime          @default(now())

  conversation   Conversation      @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt])
  @@map("messages")
}

enum ConversationStatus {
  OPEN
  CLOSED
}

enum MessageSenderType {
  USER
  ADMIN
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([userId, productId])
  @@map("cart_items")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  
  // Customer
  userId          String?
  user            User?       @relation(fields: [userId], references: [id])
  
  // Guest checkout info
  guestEmail      String?
  guestPhone      String?
  
  // Addresses
  shippingAddressId String?
  billingAddressId  String?
  shippingAddress   Address? @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress    Address? @relation("BillingAddress", fields: [billingAddressId], references: [id])
  
  // Order details
  status          OrderStatus @default(PENDING)
  
  // Pricing
  subtotal        Decimal     @db.Decimal(10, 2)
  shippingCost    Decimal     @default(0) @db.Decimal(10, 2)
  tax             Decimal     @default(0) @db.Decimal(10, 2)
  discountAmount  Decimal     @default(0) @db.Decimal(10, 2)
  total           Decimal     @db.Decimal(10, 2)
  
  // Shipping
  shippingMethod  String?
  trackingNumber  String?
  estimatedDelivery DateTime?
  actualDelivery  DateTime?
  
  // Payment
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String?
  stripePaymentId String?
  
  // Notes
  customerNotes   String?
  adminNotes      String?
  
  // Timestamps
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  shippedAt       DateTime?
  deliveredAt     DateTime?
  
  // Relations
  items           OrderItem[]
  
  // Fundraiser connection
  fundraiserId    String?
  fundraiser      Fundraiser? @relation(fields: [fundraiserId], references: [id])
  
  @@map("orders")
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String
  productId   String
  
  quantity    Int
  unitPrice   Decimal @db.Decimal(10, 2)
  totalPrice  Decimal @db.Decimal(10, 2)
  
  // Product snapshot (in case product details change)
  productName String
  productSku  String
  productImage String?
  
  createdAt   DateTime @default(now())
  
  // Relations
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product @relation(fields: [productId], references: [id])
  
  @@map("order_items")
}

model Review {
  id          String      @id @default(cuid())
  userId      String
  productId   String
  
  rating      Int         // 1-5 stars
  title       String?
  comment     String?
  isVerified  Boolean     @default(false) // Verified purchase
  
  // Moderation
  status      ReviewStatus @default(PENDING)
  moderatedAt DateTime?
  moderatedBy String?
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([userId, productId]) // One review per user per product
  @@map("reviews")
}

model Fundraiser {
  id                String      @id @default(cuid())
  name              String
  slug              String      @unique
  description       String?
  
  organizationName  String
  contactEmail      String
  contactPhone      String?
  
  // Fundraiser details
  startDate         DateTime
  endDate           DateTime
  goal              Decimal?    @db.Decimal(10, 2)
  commissionRate    Decimal     @db.Decimal(5, 2) // Percentage
  
  // Status
  status            FundraiserStatus @default(DRAFT)
  isActive          Boolean     @default(false)
  
  // Tracking
  totalOrders       Int         @default(0)
  totalRevenue      Decimal     @default(0) @db.Decimal(10, 2)
  totalCommission   Decimal     @default(0) @db.Decimal(10, 2)
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  // Relations
  orders            Order[]
  products          FundraiserProduct[]
  
  @@map("fundraisers")
}

model FundraiserProduct {
  id            String     @id @default(cuid())
  fundraiserId  String
  productId     String
  
  // Custom pricing for fundraiser
  price         Decimal?   @db.Decimal(10, 2)
  isActive      Boolean    @default(true)
  
  createdAt     DateTime   @default(now())
  
  // Relations
  fundraiser    Fundraiser @relation(fields: [fundraiserId], references: [id], onDelete: Cascade)
  product       Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([fundraiserId, productId])
  @@map("fundraiser_products")
}

model WholesaleAccount {
  id              String    @id @default(cuid())
  userId          String    @unique
  
  businessName    String
  businessType    BusinessType
  taxId           String?
  resaleNumber    String?
  
  // Contact info
  contactName     String
  website         String?
  
  // Application details
  yearsInBusiness Int?
  estimatedVolume String?
  
  // Status
  status          WholesaleStatus @default(PENDING)
  approvedAt      DateTime?
  approvedBy      String?
  
  // Wholesale pricing
  discountRate    Decimal   @default(0) @db.Decimal(5, 2) // Percentage
  minimumOrder    Decimal?  @db.Decimal(10, 2)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("wholesale_accounts")
}

model Recipe {
  id          String    @id @default(cuid())
  title       String    @unique
  slug        String    @unique
  description String
  category    String
  difficulty  String
  prepTime    String
  cookTime    String
  servings    Int
  featured    Boolean   @default(false)
  
  featuredImage String
  ingredients   String[]
  instructions  String[]
  
  // SEO
  metaTitle       String?
  metaDescription String?
  ogImage         String?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  recipeTags    RecipeTag[]
  
  @@map("recipes")
}

model Analytics {
  id        String      @id @default(cuid())
  type      AnalyticsType
  
  // Event details
  page      String?
  action    String?
  category  String?
  label     String?
  value     Int?
  
  // Session info
  sessionId String?
  userId    String?
  ipAddress String?
  userAgent String?
  
  // Geo location
  country   String?
  region    String?
  city      String?
  
  createdAt DateTime    @default(now())
  
  @@index([type, createdAt])
  @@index([page])
  @@map("analytics")
}

model Permission {
  id          String              @id @default(cuid())
  name        String              @unique // e.g., "orders:read", "products:write"
  description String?
  category    PermissionCategory
  
  createdAt   DateTime            @default(now())
  
  // Relations
  rolePermissions RolePermission[]
  
  @@index([category])
  @@map("permissions")
}

model RolePermission {
  id           String   @id @default(cuid())
  role         UserRole
  permissionId String
  
  createdAt    DateTime @default(now())
  
  // Relations
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@unique([role, permissionId])
  @@index([role])
  @@map("role_permissions")
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  type      TagType
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  productTags ProductTag[]
  recipeTags  RecipeTag[]
  mediaTags   MediaTag[]
  eventTags   EventTag[]
  
  @@index([type])
  @@map("tags")
}

model ProductTag {
  id        String   @id @default(cuid())
  productId String
  tagId     String
  
  createdAt DateTime @default(now())
  
  // Relations
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@unique([productId, tagId])
  @@map("product_tags")
}

model RecipeTag {
  id       String   @id @default(cuid())
  recipeId String
  tagId    String
  
  createdAt DateTime @default(now())
  
  // Relations
  recipe    Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  tag       Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@unique([recipeId, tagId])
  @@map("recipe_tags")
}

model Media {
  id          String   @id @default(cuid())
  url         String
  filename    String
  mimeType    String
  fileSize    Int      // bytes
  
  // Metadata
  alt         String?
  caption     String?
  width       Int?
  height      Int?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  mediaTags   MediaTag[]
  socialMediaPosts SocialMediaPostMedia[]
  
  @@index([mimeType])
  @@map("media")
}

model MediaTag {
  id      String   @id @default(cuid())
  mediaId String
  tagId   String
  
  createdAt DateTime @default(now())
  
  // Relations
  media     Media @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  tag       Tag   @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@unique([mediaId, tagId])
  @@map("media_tags")
}

model FeaturedEvent {
  id                String    @id @default(cuid())
  googleEventId     String?   @unique // Null if manually created
  title             String
  description       String?
  location          String?
  startDate         DateTime
  endDate           DateTime?
  
  // Featured settings
  featuredFrom      DateTime
  featuredTo        DateTime?
  isWhereIsJose     Boolean   @default(false)
  customDescription String?
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  eventTags         EventTag[]
  
  @@index([isWhereIsJose])
  @@index([featuredFrom, featuredTo])
  @@map("featured_events")
}

model EventTag {
  id      String   @id @default(cuid())
  eventId String
  tagId   String
  
  createdAt DateTime @default(now())
  
  // Relations
  event     FeaturedEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tag       Tag           @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@unique([eventId, tagId])
  @@map("event_tags")
}

model ServiceKey {
  id             String   @id @default(cuid())
  serviceName    String   // e.g., "stripe", "meta", "google_calendar"
  keyName        String   // e.g., "api_key", "access_token", "refresh_token"
  encryptedValue String   @db.Text
  iv             String   // Initialization vector for AES-GCM
  
  isActive       Boolean  @default(true)
  lastUsed       DateTime?
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@unique([serviceName, keyName])
  @@index([serviceName])
  @@map("service_keys")
}

model SocialMediaPost {
  id          String                   @id @default(cuid())
  platforms   SocialMediaPlatform[]    // Array of platforms
  content     String                   @db.Text
  
  scheduledAt DateTime?
  status      SocialMediaPostStatus    @default(DRAFT)
  
  // External IDs after publishing
  externalIds Json?                    // {facebook: "123", instagram: "456"}
  
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  publishedAt DateTime?
  
  // Relations
  media       SocialMediaPostMedia[]
  
  @@index([status])
  @@index([scheduledAt])
  @@map("social_media_posts")
}

model SocialMediaPostMedia {
  id      String   @id @default(cuid())
  postId  String
  mediaId String
  order   Int      @default(0)
  
  createdAt DateTime @default(now())
  
  // Relations
  post      SocialMediaPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  media     Media           @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  
  @@unique([postId, mediaId])
  @@map("social_media_post_media")
}

model EmailTemplate {
  id        String   @id @default(cuid())
  key       String   @unique  // e.g., "order_confirmation", "shipping_notification"
  name      String
  subject   String
  html      String   @db.Text
  text      String?  @db.Text
  variables Json?    // {"name": "string", "orderNumber": "string"}
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("email_templates")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String   // e.g., "order.update", "user.impersonate", "product.delete"
  entityType String?  // e.g., "Order", "Product", "User"
  entityId   String?
  changes    Json?    // Before/after snapshot
  ipAddress  String?
  userAgent  String?  @db.Text
  
  createdAt  DateTime @default(now())
  
  @@index([userId])
  @@index([action])
  @@index([entityType, entityId])
  @@index([createdAt])
  @@map("audit_logs")
}

model Invoice {
  id         String        @id @default(cuid())
  number     String        @unique // e.g., "INV-2024-001"
  
  customerId String?
  orderId    String?       // Optional link to Order
  
  status     InvoiceStatus @default(DRAFT)
  dueDate    DateTime
  total      Decimal       @db.Decimal(10, 2)
  
  lines      Json          // Array of line items
  notes      String?       @db.Text
  
  sentAt     DateTime?
  paidAt     DateTime?
  
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  
  @@index([customerId])
  @@index([status])
  @@index([dueDate])
  @@map("invoices")
}

// Enums
enum UserRole {
  CUSTOMER
  ADMIN
  DEVELOPER
  STAFF
  WHOLESALE
}

enum PermissionCategory {
  ORDERS
  PRODUCTS
  USERS
  CONTENT
  ANALYTICS
  SETTINGS
  FINANCIALS
  API_KEYS
  MESSAGING
  SOCIAL_MEDIA
}

enum TagType {
  PRODUCT
  RECIPE
  MEDIA
  EVENT
  GENERAL
}

enum SocialMediaPlatform {
  FACEBOOK
  INSTAGRAM
  TWITTER
  GOOGLE_MY_BUSINESS
  TIKTOK
}

enum SocialMediaPostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  FAILED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum AddressType {
  SHIPPING
  BILLING
  BOTH
}

enum HeatLevel {
  MILD
  MEDIUM
  HOT
  EXTRA_HOT
  FRUIT // For fruit salsas
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

enum FundraiserStatus {
  DRAFT
  ACTIVE
  ENDED
  CANCELLED
}

enum BusinessType {
  RETAIL_STORE
  RESTAURANT
  DISTRIBUTOR
  ONLINE_STORE
  OTHER
}

enum WholesaleStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum AnalyticsType {
  PAGE_VIEW
  PRODUCT_VIEW
  ADD_TO_CART
  PURCHASE
  SEARCH
  CLICK
  CUSTOM
}
